// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model with integrated NextAuth.js support
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  wishlist      Wishlist?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product-related models
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float    // Changed from Decimal to Float for SQLite compatibility
  inventory   Int      @default(0)
  isActive    Boolean  @default(true)
  sku         String   @unique
  slug        String   @unique
  weight      Float?
  dimensions  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  
  images        ProductImage[]
  variants      ProductVariant[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isDefault Boolean  @default(false)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("product_images")
}

model ProductVariant {
  id          String                 @id @default(cuid())
  name        String
  price       Float?                 // Changed from Decimal to Float for SQLite compatibility
  sku         String                 @unique
  inventory   Int                    @default(0)
  productId   String
  product     Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes  ProductVariantAttribute[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("product_variants")
}

model ProductVariantAttribute {
  id               String         @id @default(cuid())
  name             String         // e.g., "Color", "Size"
  value            String         // e.g., "Red", "XL"
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("product_variant_attributes")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?    
  slug        String     @unique
  imageUrl    String?
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

// Order-related models
model Order {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  total           Float     // Changed from Decimal to Float for SQLite compatibility
  subTotal        Float     // Changed from Decimal to Float for SQLite compatibility
  tax             Float     // Changed from Decimal to Float for SQLite compatibility
  shipping        Float     // Changed from Decimal to Float for SQLite compatibility
  discount        Float?    // Changed from Decimal to Float for SQLite compatibility
  couponCode      String?
  shippingAddressId String
  shippingAddress Address   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId String?
  billingAddress  Address?  @relation("BillingAddress", fields: [billingAddressId], references: [id])
  paymentIntentId String?
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id            String  @id @default(cuid())
  orderId       String
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String
  product       Product @relation(fields: [productId], references: [id])
  variantId     String?
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  quantity      Int
  price         Float   // Changed from Decimal to Float for SQLite compatibility
  total         Float   // Changed from Decimal to Float for SQLite compatibility
  name          String  // Snapshot of product name at time of order
  sku           String  // Snapshot of product SKU at time of order
  variantName   String? // Snapshot of variant name at time of order

  @@map("order_items")
}

// Shopping cart
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

// Wishlist
model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  addedAt    DateTime @default(now())

  @@map("wishlist_items")
}

// User address
model Address {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String?
  postalCode    String
  country       String
  phone         String?
  isDefault     Boolean @default(false)
  
  // Relations
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

// Reviews and ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int      
  title     String?
  content   String?
  isPublished Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// Enums
enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
